package info

import (
	"context"
	"golang.org/x/text/message"
	"fmt"
	"strings"
	"strconv"
    "math"
	"github.com/invopop/ctxi18n/i18n"
    "github.com/dustin/go-humanize"

	"github.com/bauerbrun0/youtube-downloader/internal/ytdlp"
    "github.com/bauerbrun0/youtube-downloader/internal/appctx"
	"sort"
)

func formatDuration(seconds int, ctx context.Context) string {
    hours := seconds / 3600
	minutes := (seconds % 3600) / 60
	remainingSeconds := seconds % 60

	var sb strings.Builder

	if hours > 0 {
	    sb.WriteString(fmt.Sprintf("%d%s ", hours, i18n.T(ctx, "info.hour_shorthand")))
	}

	if minutes > 0 {
	    sb.WriteString(fmt.Sprintf("%d%s ", minutes, i18n.T(ctx, "info.minute_shorthand")))
	}

	sb.WriteString(fmt.Sprintf("%d%s", remainingSeconds, i18n.T(ctx, "info.second_shorthand")))

    return sb.String();
}

func formatViewCount(viewCount int, ctx context.Context) string {
    if viewCount > 1000000 {
        return fmt.Sprintf("%.2f%s %s", float64(viewCount) / 1000000, i18n.T(ctx, "info.million_shorthand"), i18n.T(ctx, "info.views"))
    }

    if viewCount > 1000 {
        return fmt.Sprintf("%.2f%s %s", float64(viewCount) / 1000, i18n.T(ctx, "info.thousand_shorthand"), i18n.T(ctx, "info.views"))
    }

    lang := appctx.GetLanguage(ctx)
    p := message.NewPrinter(message.MatchLanguage(lang))
    return p.Sprintf("%d %s", viewCount, i18n.T(ctx, "info.views"))
}

func getDetails(ctx context.Context, video ytdlp.VideoInfo) string {
    details := fmt.Sprintf("%s • %s • %s", video.Channel, formatViewCount(video.ViewCount, ctx), formatDuration(video.Duration, ctx));
    return details
}

func getRoundedFPS(fps float64) int64 {
    f := math.Floor(fps)
    if f >= float64(math.MaxInt64) {
        return math.MaxInt64
    }

    if f <= float64(math.MinInt64) {
        return math.MinInt64
    }
    return int64(f)
}

func getOrderedFormats(formats []ytdlp.Format) (ret []ytdlp.Format) {
    sort.Slice(formats, func(i, j int) bool {
            return formats[i].Width > formats[j].Width
    })

    return formats
}

templ VideoInfoPage(video ytdlp.VideoInfo) {
    <div class="w-full animate-fade" x-data="{
        loading: false,
        toggleLoading() { this.loading = !this.loading }
    }">
        @header(video.Title, getDetails(ctx, video), video.ThumbnailUrl)
        <div class="mx-auto 2xl:max-w-screen-2xl px-2 mb-6">
            <hr class="border-accent dark:border-accent-dark md:hidden mt-3 mb-6"/>
            <h2 class="text-3xl md:text-2xl font-bold my-4">
                { i18n.T(ctx, "info.quick_download_title") }
            </h2>

            <div class="grid grid-flow-row grid-cols-1 lg:grid-cols-2 2xl:grid-cols-3 gap-3">
                @QuickDownloadForm(QuickDownloadFormData{"audio_and_video", "none", "best", "best", video.Url})
                @QuickDownloadForm(QuickDownloadFormData{"audio_and_video", "mp4", "best", "best", video.Url})
                @QuickDownloadForm(QuickDownloadFormData{"audio", "none", "best", "", video.Url})
                @QuickDownloadForm(QuickDownloadFormData{"audio", "mp3", "best", "", video.Url})
            </div>

             <h2 class="text-3xl md:text-2xl font-bold my-4">
                { i18n.T(ctx, "info.all_formats_title") }
             </h2>

             @videoFormatsTable() {
                for _, format := range getOrderedFormats(video.Formats) {
                    @formatRow() {
                        <div class="font-bold">{ format.FormatID }</div>
                        <div>{ format.Resolution }</div>
                        <div>{ format.FormatNote }</div>
                        <div>
                            @extensionBadge(format.Extension)
                        </div>

                        <div>{ format.Container }</div>

                        if format.VideoCodec != "none" {
                            <div>{ format.VideoCodec }</div>
                        } else {
                            <div></div>
                        }
                        if format.AudioCodec != "none" {
                            <div>{ format.AudioCodec }</div>
                        } else {
                            <div></div>
                        }

                        if format.FileSize != 0 {
                            <div>
                                @fileSizeBadge(humanize.Bytes(uint64(format.FileSize    )))
                            </div>
                        } else {
                            <div></div>
                        }

                        if getRoundedFPS(format.FPS) != 0 {
                            <div>{ strconv.FormatInt(getRoundedFPS(format.FPS), 10) }</div>
                        } else {
                            <div></div>
                        }
                        <div>{ strconv.FormatFloat(format.TBR, 'f', -1, 64) }</div>
                        <div>{ strconv.FormatFloat(format.VBR, 'f', -1, 64) }</div>
                        <div>{ strconv.FormatFloat(format.ABR, 'f', -1, 64) }</div>
                        <div>@downloadButton(format.FormatID)</div>
                    }
                }
             }
        </div>
    </div>
}